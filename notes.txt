26/9/18
    main electron window set up
    apparently it won't initialise if electron is attempting to be initialised in another file
    (it needs to be initiated within the js file you ran the electron command with)

9/10/18
    apparently in the render process, you need remote.require("./yourlocalmodule") for it to work
    (that's if you use <script src=""></script> instead of <script>window.onload = () => {require("./thing");}</script>)
    
14/11/18
    Current gameplan:
    The server object will always persist as long as the program's running
    But when the player starts a new game/hosts, then the server will .listen()
    And the clientside will have the socket.io client library to use io.connect
    
21/11/18
    FYI, IPC will not transfer functions, as it's JSON'ised
    So remote.getGlobal must be used for the server

4/12/18
    You can send functions in socket.emit()!

13/12/18
    Working on loading/instantiating world data

14/1/19
    Work on listing available worlds in start-config.html/js and start implementing transferring
    the proper world data from the main thread to the client thread
    Refactored the require's in erver.js

16/1/19
    It's a pain in the ass for the server to try and get what the current world name is,
    The server object now contains the Game object (similar to the old mapocalypse one)

29/1/19
    Available locally saved worlds are properly listed in start-configure's load section
    Need to work on saving newly created worlds (as they're the host)

6/2/2019
    Worlds now save properly and show up on the start-config load list
    Also, some sanitisation on world creation inputs
    Also, localisation has been imported from the old mapocalypse, hopefully i can integrate most of the old
    code back into this project, but new this locale needs to be extended for the other menus